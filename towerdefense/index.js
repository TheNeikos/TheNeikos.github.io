// Generated by CoffeeScript 1.7.1
(function() {
  var BaseTower, Checkpoint, Game, NormalTower, TempTower, Tower,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tower = (function(_super) {
    __extends(Tower, _super);

    function Tower(grid, io, x, y, width, range) {
      var cellPos;
      this.grid = grid;
      this.width = width;
      this.range = range;
      cellPos = this.grid.getCellCenter(x, y);
      this.img = new iio.Rect(cellPos.x + (this.width - 1) * 10, cellPos.y + (this.width - 1) * 10, this.width * 20).setStrokeStyle("black");
      this.styles = this.img.styles;
      this.rangeIndicator = new iio.Circle(cellPos.x + (this.width - 1) * 10, cellPos.y + (this.width - 1) * 10, this.range * 20).setStrokeStyle("rgba(0,0,0,0.2)").setLineWidth(3).setFillStyle("rgba(200,200,200,0.1)");
      io.addObj(this.rangeIndicator);
      this.setPos(x, y);
    }

    Tower.prototype.setPos = function(x, y) {
      var cellPos;
      Tower.__super__.setPos.apply(this, arguments);
      this.unmarkBuilding();
      cellPos = this.grid.getCellCenter(x, y);
      this.img.setPos(cellPos.x + (this.width - 1) * 10, cellPos.y + (this.width - 1) * 10);
      this.rangeIndicator.setPos(cellPos.x + (this.width - 1) * 10, cellPos.y + (this.width - 1) * 10);
      this.markBuilding(x, y);
    };

    Tower.prototype.markBuilding = function(x, y) {
      var maxX, maxY, minX, minY, _i, _j, _x, _y;
      minX = Math.max(x, 0);
      minY = Math.max(y, 0);
      maxX = Math.min(x + this.width - 1, 49);
      maxY = Math.min(y + this.width - 1, 29);
      for (_x = _i = minX; minX <= maxX ? _i <= maxX : _i >= maxX; _x = minX <= maxX ? ++_i : --_i) {
        for (_y = _j = minY; minY <= maxY ? _j <= maxY : _j >= maxY; _y = minY <= maxY ? ++_j : --_j) {
          this.grid.cells[_x][_y].building = this;
        }
      }
    };

    Tower.prototype.unmarkBuilding = function() {
      var maxX, maxY, minX, minY, oldCellPos, _i, _j, _x, _y;
      oldCellPos = this.grid.getCellAt(this.img.pos, true);
      minX = Math.max(oldCellPos.x, 0);
      minY = Math.max(oldCellPos.y, 0);
      maxX = Math.min(oldCellPos.x + this.width - 1, 49);
      maxY = Math.min(oldCellPos.y + this.width - 1, 29);
      for (_x = _i = minX; minX <= maxX ? _i <= maxX : _i >= maxX; _x = minX <= maxX ? ++_i : --_i) {
        for (_y = _j = minY; minY <= maxY ? _j <= maxY : _j >= maxY; _y = minY <= maxY ? ++_j : --_j) {
          this.grid.cells[_x][_y].building = null;
        }
      }
    };

    Tower.prototype.draw = function() {
      this.img.draw.apply(this.img, arguments);
      return this.rangeIndicator.draw.apply(this.img, arguments);
    };

    return Tower;

  })(iio.Shape);

  TempTower = (function(_super) {
    __extends(TempTower, _super);

    function TempTower() {
      return TempTower.__super__.constructor.apply(this, arguments);
    }

    TempTower.prototype.markBuilding = function() {};

    TempTower.prototype.unmarkBuilding = function() {};

    return TempTower;

  })(Tower);

  BaseTower = (function(_super) {
    __extends(BaseTower, _super);

    function BaseTower() {
      BaseTower.__super__.constructor.apply(this, arguments);
      this.img.setFillStyle("navy");
    }

    return BaseTower;

  })(Tower);

  NormalTower = (function(_super) {
    __extends(NormalTower, _super);

    function NormalTower() {
      NormalTower.__super__.constructor.apply(this, arguments);
      this.img.setFillStyle("lightblue");
    }

    return NormalTower;

  })(Tower);

  Checkpoint = (function(_super) {
    __extends(Checkpoint, _super);

    function Checkpoint(x, y) {
      this.setPos(x, y);
    }

    return Checkpoint;

  })(iio.Obj);

  Game = (function() {
    function Game(io) {
      this.io = io;
      this.createGrid(io);
      this.setupGrid(io);
      this.buildMode = true;
      this.setupMouse(io);
      this.towers = [];
      io.addGroup("towers", 10);
      this.baseTower = new BaseTower(this.grid, io, 46, 12, 7, 9);
      io.addToGroup("towers", this.baseTower);
      io.setFramerate(60);
    }

    Game.prototype.createGrid = function(io) {
      this.grid = new iio.Grid(0, 0, 50, 30, 20).setStrokeStyle("rgba(40, 20, 128, 0.5)").setLineWidth(1);
      io.addGroup("grid", -1);
      return io.addToGroup("grid", this.grid);
    };

    Game.prototype.setupGrid = function(io) {
      var cellPos, dx, dy, i, points, vertical, x, y, _i, _j, _k, _l, _len, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.checkpoints = [];
      io.addGroup("checkpoints", -21);
      io.addToGroup("checkpoints", this.checkpoints.push(new Checkpoint(1, 5)));
      io.addToGroup("checkpoints", this.checkpoints.push(new Checkpoint(10, 5)));
      io.addToGroup("checkpoints", this.checkpoints.push(new Checkpoint(10, 25)));
      io.addToGroup("checkpoints", this.checkpoints.push(new Checkpoint(20, 25)));
      io.addToGroup("checkpoints", this.checkpoints.push(new Checkpoint(20, 15)));
      io.addToGroup("checkpoints", this.checkpoints.push(new Checkpoint(45, 15)));
      points = [];
      _ref = this.checkpoints;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        points.push(this.grid.getCellCenter(i.pos));
      }
      io.addGroup("overlays", -20);
      for (i = _j = 0, _ref1 = this.checkpoints.length - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        vertical = this.checkpoints[i].pos.x - this.checkpoints[i + 1].pos.x === 0;
        if (vertical) {
          for (y = _k = _ref2 = this.checkpoints[i].pos.y - 1, _ref3 = this.checkpoints[i + 1].pos.y + 1; _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; y = _ref2 <= _ref3 ? ++_k : --_k) {
            for (dx = _l = -1; _l <= 1; dx = ++_l) {
              if (this.grid.cells[this.checkpoints[i].pos.x + dx][y].unbuildable) {
                continue;
              }
              this.grid.cells[this.checkpoints[i].pos.x + dx][y].unbuildable = true;
              cellPos = this.grid.getCellCenter(this.checkpoints[i].pos.x + dx, y);
              io.addToGroup("overlays", new iio.Rect(cellPos.x, cellPos.y, 10).setFillStyle("blanchedalmond").setStrokeStyle("rgb(155, 135, 105)"));
            }
          }
        } else {
          for (x = _m = _ref4 = this.checkpoints[i].pos.x - 1, _ref5 = this.checkpoints[i + 1].pos.x + 1; _ref4 <= _ref5 ? _m <= _ref5 : _m >= _ref5; x = _ref4 <= _ref5 ? ++_m : --_m) {
            for (dy = _n = -1; _n <= 1; dy = ++_n) {
              if (this.grid.cells[x][this.checkpoints[i].pos.y + dy].unbuildable) {
                continue;
              }
              this.grid.cells[x][this.checkpoints[i].pos.y + dy].unbuildable = true;
              cellPos = this.grid.getCellCenter(x, this.checkpoints[i].pos.y + dy);
              io.addToGroup("overlays", new iio.Rect(cellPos.x, cellPos.y, 10).setFillStyle("blanchedalmond").setStrokeStyle("rgb(155, 135, 105)"));
            }
          }
        }
      }
      return io.addToGroup("checkpoints", new iio.MultiLine(points).setStrokeStyle("red").setLineWidth(1), "checkpoints");
    };

    Game.prototype.setupMouse = function(io) {
      this.tempTurret = new TempTower(this.grid, io, 10, 10, 2, 0);
      this.tempTurret.img.setFillStyle("green").setAlpha(0.6);
      io.addToGroup("overlays", this.tempTurret);
      io.canvas.addEventListener("mousemove", (function(_this) {
        return function(e) {
          var buildable, i, pos, _i, _ref;
          if (_this.tempTurret.styles.alpha === 0 && _this.buildMode) {
            return _this.tempTurret.setAlpha(0.5);
          } else if (_this.tempTurret.styles.alpha !== 0 && _this.buildMode) {
            pos = _this.grid.getCellAt(io.getEventPosition(e), true);
            _this.tempTurret.setPos(pos.x, pos.y);
            buildable = !!!_this.grid.cells[pos.x][pos.y].unbuildable || !!!_this.grid.cells[pos.x][pos.y].building;
            for (i = _i = 0, _ref = _this.tempTurret.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              if (_this.grid.cells[pos.x + i][pos.y].unbuildable || !!_this.grid.cells[pos.x + i][pos.y].building) {
                buildable = false;
              }
              if (_this.grid.cells[pos.x][pos.y + i].unbuildable || !!_this.grid.cells[pos.x][pos.y + i].building) {
                buildable = false;
              }
              if (_this.grid.cells[pos.x + i][pos.y + i].unbuildable || !!_this.grid.cells[pos.x + i][pos.y + i].building) {
                buildable = false;
              }
            }
            if (buildable) {
              _this.tempTurret.buildable = true;
              return _this.tempTurret.img.setFillStyle("green");
            } else {
              _this.tempTurret.buildable = false;
              return _this.tempTurret.img.setFillStyle("red");
            }
          }
        };
      })(this));
      return io.canvas.addEventListener("mousedown", (function(_this) {
        return function(e) {
          var tower;
          if (_this.tempTurret.buildable) {
            tower = new NormalTower(_this.grid, io, _this.tempTurret.pos.x, _this.tempTurret.pos.y, 2, 4);
            io.addToGroup("towers", tower);
            return _this.towers.push(tower);
          }
        };
      })(this));
    };

    Game.prototype.setBuildMode = function(mode) {
      return this.buildMode = mode;
    };

    return Game;

  })();

  $(function() {
    var game;
    game = null;
    return iio.start(function(io) {
      return game = new Game(io);
    }, "gameCanvas");
  });

}).call(this);
